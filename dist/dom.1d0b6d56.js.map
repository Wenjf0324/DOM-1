{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    //create: function(){}\r\n    //创建节点\r\n    create(string){\r\n        const container = document.createElement(\"template\");\r\n        container.innerHTML = string.trim();  //去除空格\r\n        return container.content.firstChild;\r\n    },\r\n    //新增弟弟\r\n    after(node, node2){\r\n       node.parentNode.insertBefore(node2, node.nextSibling);\r\n    },\r\n    //新增哥哥\r\n    before(node, node2){\r\n        node.parentNode.insertBefore(node2,node);\r\n    },\r\n    //新增儿子\r\n    append(parent, node){\r\n        parent.appendChild(node);\r\n    },\r\n    //新增爸爸\r\n    wrap(node, parent){\r\n        dom.before(node, parent);  //把新增爸爸放到儿子node前面\r\n        dom.append(parent, node);  //把儿子node放到新增爸爸里面\r\n    },\r\n\r\n    //删除节点\r\n    remove(node){\r\n        node.parentNode.removeChild(node);\r\n        return node;\r\n    },\r\n    //删除后代\r\n    empty(node){\r\n        //const childNodes = node.childNodes;\r\n        //const {childNodes} = node;\r\n        const array = [];\r\n        let x = node.firstChild;\r\n        while(x){\r\n            array.push(dom.remove(node.firstChild));\r\n            x = node.firstChild;\r\n        }\r\n        return array;\r\n    },\r\n    //读写属性\r\n    attr(node, name, value){  //重载\r\n        if(arguments.length === 3){\r\n            node.setAttribute(name, value);  //写\r\n        }else if(arguments.length === 2){\r\n            return node.getAttribute(name);  //读\r\n        }\r\n    },\r\n    //读写文本内容\r\n    text(node, string){  //适配\r\n        if(arguments.length === 2){  //写\r\n            if(`innerText` in node){\r\n                node.innerText = string;  //ie\r\n            }else{\r\n                node.textContent = string;  //firefox/chrome\r\n            }\r\n        }else if(arguments.length === 1){  //读\r\n            if(`innerText` in node){\r\n                return node.innerText;\r\n            }else{\r\n                return node.textContent;\r\n            }\r\n        }\r\n    },\r\n    //读写HTML内容\r\n    html(node, string){\r\n        if(arguments.length === 2){\r\n            node.innerHTML = string;\r\n        }else if(arguments.length === 1){\r\n            return node.innerHTML;\r\n        }\r\n    },\r\n    //读写style内容\r\n    style(node, name, value){\r\n        if(arguments.length === 3){\r\n            //dom.style(div, 'color', 'red')\r\n            node.style[name] = value;\r\n        }else if(arguments.length === 2){\r\n            if(typeof name === 'string'){\r\n                //dom.style(div, 'color')\r\n                return node.style[name];\r\n            }else if(name instanceof Object){\r\n                //dom.style(div, {color: 'red'})\r\n                const object = name;\r\n                for(let key in object){\r\n                    node.style[key] = object[key];\r\n                }\r\n            }\r\n        }\r\n    },\r\n    class: {\r\n        add(node, className){  //添加class\r\n            node.classList.add(className);\r\n        }, \r\n        remove(node, className){  //删除class\r\n            node.classList.remove(className);\r\n        },\r\n        has(node, className){  //判断className是否存在\r\n            return node.classList.contains(className);\r\n        }\r\n    },\r\n    on(node, eventName, fn){  //添加事件监听\r\n        node.addEventListener(eventName, fn);\r\n    }, \r\n    off(node, eventName, fn){  //删除事件监听\r\n        node.removeEventListener(eventName, fn);\r\n    },\r\n    //获取标签或标签们\r\n    find(selector, scope){\r\n        return (scope || document).querySelectorAll(selector);\r\n    },\r\n    //获取父元素\r\n    parent(node){\r\n        return node.parentNode;\r\n    },\r\n    //获取子元素\r\n    children(node){\r\n        return node.children;\r\n    },\r\n    //获取兄弟姐妹元素\r\n    siblings(node){\r\n        return Array.from(node.parentNode.children)\r\n        .filter(n=>n!==node); //转化为数组并过滤掉自己\r\n    },\r\n    //获取下一个节点\r\n    next(node){\r\n        let x = node.nextSibling;\r\n        while(x && x.nodeType === 3){\r\n            x = x.nextSibling;\r\n        }\r\n        return x;\r\n    },\r\n    //获取上一个节点\r\n    previous(node){\r\n        let x = node.previousSibling;\r\n        while(x && x.nodeType === 3){\r\n            x = x.previousSibling;\r\n        }\r\n        return x;\r\n    },\r\n    //遍历所有节点\r\n    each(nodeList, fn){\r\n        for(let i=0; i<nodeList.length; i++){\r\n            fn.call(null, nodeList[i]);\r\n        }\r\n    },\r\n    //获取排行老几\r\n    index(node){\r\n        const list = dom.children(node.parentNode);\r\n        let i;\r\n        for(i=0; i<list.length; i++){\r\n            if(list[i]===node){\r\n                break;\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n};"]}